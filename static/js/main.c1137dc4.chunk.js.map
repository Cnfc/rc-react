{"version":3,"sources":["components/TextInput/TextInput.js","components/TextInput/index.js","components/Label/Label.js","components/Label/index.js","components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/PasswordInput/PasswordInputExample.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","docs/examples/TextInput/TextInputExampleError.js","docs/examples/TextInput/TextInputExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","index.js"],"names":["TextInput","htmlId","name","label","type","required","onChange","placeholder","value","error","children","props","style","marginBottom","Label","htmlFor","id","border","className","color","display","ProgressBar","getColor","percent","getWidthAsPersentOfTotalWidth","parseInt","width","this","height","backgroundColor","Component","defaultProps","PasswordInput","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","EyeIcon","length","React","xmlns","viewBox","transform","fill","d","cx","cy","r","module","exports","EyeIconExample","ExampleHelloWorld","ExampleAllFeatures","password","target","minLength","getQuality","Example10Percent","ExampleError","ExampleOptional","HelloWorld","message","massage","RegistrationForm","user","onSubmit","validate","submitted","email","errors","minPasswordLength","Object","getOwnPropertyNames","confirmationMessage","passwordQuality","ExampleRegistrationForm","console","log","TextInputBEM","styles","fieldset","inputError","TextInputCSSModules","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","showCode","example","description","ExampleComponent","require","componentName","default","Props","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1137dc4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({ htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props }) {\n  return (\n    <div style={{ marginBottom: 16 }}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && { border: 'solid 1px red' }}\n        {...props} />\n      {children}\n      {error && <div className=\"error\" style={{ color: 'red' }}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;","export { default } from './TextInput';","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label is required field display, htmlFor and block styling */\nfunction Label({ htmlFor, label, required }) {\n  return (\n    <label style={{ display: 'block' }} htmlFor={htmlFor}>\n      {label} {required && <span style={{ color: 'red' }}> *</span>}\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n}\n\nexport default Label;","export { default } from './Label';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends Component {\n\n\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  getWidthAsPersentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10)\n  }\n\n  render() {\n    const { percent, width, height } = this.props;\n    return (\n      <div style={{ border: '1px solid lightgray', width: width }}>\n        <div style={{\n          width: this.getWidthAsPersentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\n\n\nProgressBar.propTypes = {\n  /** \n   *  Percent of progress completed\n   *  */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number.isRequired\n\n}\n\n\n\nProgressBar.defaultProps = {\n  height: 5\n}\n\n\nexport default ProgressBar;","export { default } from './ProgressBar';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"#\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;","export { default } from './PasswordInput';","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;","export { default } from './EyeIcon';","module.exports = [{\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from 'react';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  )\\n}\\n\\nexport default EyeIcon;\",\n  \"examples\": [{\n    \"name\": \"Example\",\n    \"description\": \"EyeIconExample Icon SVG\",\n    \"code\": \"import React from 'react';\\nimport EyeIcon from 'ps-react/EyeIcon';\\n\\n\\n/** EyeIconExample Icon SVG */\\nfunction EyeIconExample() {\\n  return <EyeIcon />\\n}\\nexport default EyeIconExample;\"\n  }]\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"\",\n  \"props\": {\n    \"massage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"\\\"World\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n\\n/**Message My */\\nfunction HelloWorld({ message }) {\\n  return (\\n    <div>\\n      HelloWorld <h4>{message}</h4>\\n    </div>\\n  )\\n}\\n\\n\\nHelloWorld.propTypes = {\\n  /** \\n   *  Message to display\\n   *  */\\n  massage: PropTypes.string\\n}\\n\\n\\n\\nHelloWorld.defaultProps = {\\n  massage: \\\"World\\\"\\n}\\n\\n\\n\\nexport default HelloWorld;\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom message\",\n    \"code\": \"import React from 'react';\\nimport HelloWorld from 'ps-react/HelloWorld';\\n\\n\\n/** Custom message */\\nfunction ExampleHelloWorld() {\\n  return <HelloWorld message=\\\"My Lib\\\" />\\n}\\nexport default ExampleHelloWorld;\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label is required field display, htmlFor and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Label is required field display, htmlFor and block styling */\\nfunction Label({ htmlFor, label, required }) {\\n  return (\\n    <label style={{ display: 'block' }} htmlFor={htmlFor}>\\n      {label} {required && <span style={{ color: 'red' }}> *</span>}\\n    </label>\\n  )\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n}\\n\\nexport default Label;\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'ps-react/Label';\\n\\n\\n/** Optional label */\\nfunction ExampleHelloWorld() {\\n  return <Label htmlFor='test' label=\\\"text\\\" />\\n}\\nexport default ExampleHelloWorld;\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'ps-react/Label';\\n\\n\\n/** Optional label */\\nfunction ExampleHelloWorld() {\\n  return <Label htmlFor='test' label=\\\"text\\\" required />\\n}\\nexport default ExampleHelloWorld;\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"'Password'\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    }\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  }\\n\\n  render() {\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? 'text' : 'password'}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}>\\n        {\\n          showVisibilityToggle &&\\n          <a\\n            href=\\\"#\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}>\\n            <EyeIcon />\\n          </a>\\n        }\\n        {\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n        }\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from 'react';\\nimport PasswordInput from 'ps-react/PasswordInput';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: ''\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={ event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props} />\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"\n  }, {\n    \"name\": \"PasswordInputExample\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from 'react';\\nimport PasswordInput from 'ps-react/PasswordInput';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: ''\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={6}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props} />\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React, { Component } from 'react';\\nimport PropTypes from 'prop-types';\\n\\nclass ProgressBar extends Component {\\n\\n\\n  getColor = (percent) => {\\n    if (this.props.percent === 100) return 'green';\\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\\n  }\\n\\n  getWidthAsPersentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10)\\n  }\\n\\n  render() {\\n    const { percent, width, height } = this.props;\\n    return (\\n      <div style={{ border: '1px solid lightgray', width: width }}>\\n        <div style={{\\n          width: this.getWidthAsPersentOfTotalWidth(),\\n          height,\\n          backgroundColor: this.getColor(percent)\\n        }} />\\n      </div>\\n    );\\n  }\\n}\\n\\n\\n\\nProgressBar.propTypes = {\\n  /** \\n   *  Percent of progress completed\\n   *  */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number.isRequired\\n\\n}\\n\\n\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n}\\n\\n\\nexport default ProgressBar;\",\n  \"examples\": [{\n    \"name\": \"Example100Percent\",\n    \"description\": \"100% Progress && height:20px\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 100% Progress && height:20px */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={100} width={150} height={20} />\\n}\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% Progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 10% Progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />\\n}\"\n  }, {\n    \"name\": \"Example70Percent\",\n    \"description\": \"70% Progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 70% Progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={70} width={150} />\\n}\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: '',\\n        password: ''\\n      },\\n      errors: {},\\n      submitted: false,\\n    };\\n  }\\n\\n  onChange = (event) => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({ user });\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(password.length / this.props.minPasswordLength * 100, 10);\\n    return percentOfMinLength;\\n  }\\n\\n  validate({ email, password }) {\\n    const errors = {};\\n    const { minPasswordLength } = this.props;\\n\\n    if (!email) errors.email = 'Email required.';\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({ errors });\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const { user } = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({ submitted: true });\\n    }\\n  }\\n\\n  render() {\\n    const { errors, submitted } = this.state;\\n    const { email, password } = this.state.user;\\n\\n    return (\\n      submitted ?\\n        <h2>{this.props.confirmationMessage}</h2> :\\n        <div>\\n          <TextInput\\n            htmlId=\\\"registration-form-email\\\"\\n            name=\\\"email\\\"\\n            onChange={this.onChange}\\n            label=\\\"Email\\\"\\n            value={email}\\n            error={errors.email}\\n            required />\\n\\n          <PasswordInput\\n            htmlId=\\\"registration-form-password\\\"\\n            name=\\\"password\\\"\\n            value={password}\\n            onChange={this.onChange}\\n            quality={this.passwordQuality(password)}\\n            showVisibilityToggle\\n            maxLength={50}\\n            error={errors.password} />\\n\\n          <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n        </div>\\n    )\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport RegistrationForm from 'ps-react/RegistrationForm';\\n\\nexport default class ExampleRegistrationForm extends React.Component {\\n  onSubmit = (user) => {\\n    console.log(user);\\n  }\\n\\n  render() {\\n    return <RegistrationForm onSubmit={this.onSubmit} />\\n  }\\n}\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({ htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props }) {\\n  return (\\n    <div style={{ marginBottom: 16 }}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && { border: 'solid 1px red' }}\\n        {...props} />\\n      {children}\\n      {error && <div className=\\\"error\\\" style={{ color: 'red' }}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n       />\\n    )\\n  }\\n}\\n\"\n  }, {\n    \"name\": \"TextInputExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\"\n  }, {\n    \"name\": \"TextInputExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n       />\\n    )\\n  }\\n}\"\n  }]\n}, {\n  \"name\": \"TextInputBEM\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className=\\\"textinput\\\">\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && 'textinput__input--state-error'}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputBEM from 'ps-react/TextInputBEM';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputBEM\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputCSSModules\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styles from './textInput.css';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className={styles.fieldset}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && styles.inputError}\\n        {...props}/>\\n        {children}\\n      {error && <div className={styles.error}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputCSSModules\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}];","import React from 'react';\nimport EyeIcon from 'ps-react/EyeIcon';\n\n\n/** EyeIconExample Icon SVG */\nfunction EyeIconExample() {\n  return <EyeIcon />\n}\nexport default EyeIconExample;","import React from 'react';\nimport Label from 'ps-react/Label';\n\n\n/** Optional label */\nfunction ExampleHelloWorld() {\n  return <Label htmlFor='test' label=\"text\" />\n}\nexport default ExampleHelloWorld;","import React from 'react';\nimport Label from 'ps-react/Label';\n\n\n/** Optional label */\nfunction ExampleHelloWorld() {\n  return <Label htmlFor='test' label=\"text\" required />\n}\nexport default ExampleHelloWorld;","import React from 'react';\nimport PasswordInput from 'ps-react/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n","import React from 'react';\nimport PasswordInput from 'ps-react/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={6}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 100% Progress && height:20px */\nexport default function Example10Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />\n}","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 10% Progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />\n}","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 70% Progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={70} width={150} />\n}","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n       />\n    )\n  }\n}\n","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n       />\n    )\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\n/**Message My */\nfunction HelloWorld({ message }) {\n  return (\n    <div>\n      HelloWorld <h4>{message}</h4>\n    </div>\n  )\n}\n\n\nHelloWorld.propTypes = {\n  /** \n   *  Message to display\n   *  */\n  massage: PropTypes.string\n}\n\n\n\nHelloWorld.defaultProps = {\n  massage: \"World\"\n}\n\n\n\nexport default HelloWorld;","import React from 'react';\nimport HelloWorld from 'ps-react/HelloWorld';\n\n\n/** Custom message */\nfunction ExampleHelloWorld() {\n  return <HelloWorld message=\"My Lib\" />\n}\nexport default ExampleHelloWorld;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({ user });\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length / this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({ email, password }) {\n    const errors = {};\n    const { minPasswordLength } = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({ errors });\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const { user } = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({ submitted: true });\n    }\n  }\n\n  render() {\n    const { errors, submitted } = this.state;\n    const { email, password } = this.state.user;\n\n    return (\n      submitted ?\n        <h2>{this.props.confirmationMessage}</h2> :\n        <div>\n          <TextInput\n            htmlId=\"registration-form-email\"\n            name=\"email\"\n            onChange={this.onChange}\n            label=\"Email\"\n            value={email}\n            error={errors.email}\n            required />\n\n          <PasswordInput\n            htmlId=\"registration-form-password\"\n            name=\"password\"\n            value={password}\n            onChange={this.onChange}\n            quality={this.passwordQuality(password)}\n            showVisibilityToggle\n            maxLength={50}\n            error={errors.password} />\n\n          <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n        </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;","import React from 'react';\nimport RegistrationForm from 'ps-react/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && 'textinput__input--state-error'}\n        {...props}/>\n        {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport TextInputBEM from 'ps-react/TextInputBEM';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styles from './textInput.css';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && styles.inputError}\n        {...props}/>\n        {children}\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","var map = {\n\t\"./EyeIcon/Example\": 16,\n\t\"./EyeIcon/Example.js\": 16,\n\t\"./HelloWorld/ExampleHelloWorld\": 28,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 28,\n\t\"./Label/ExampleOptional\": 17,\n\t\"./Label/ExampleOptional.js\": 17,\n\t\"./Label/ExampleRequired\": 18,\n\t\"./Label/ExampleRequired.js\": 18,\n\t\"./PasswordInput/ExampleAllFeatures\": 19,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 19,\n\t\"./PasswordInput/PasswordInputExample\": 20,\n\t\"./PasswordInput/PasswordInputExample.js\": 20,\n\t\"./ProgressBar/Example100Percent\": 21,\n\t\"./ProgressBar/Example100Percent.js\": 21,\n\t\"./ProgressBar/Example10Percent\": 22,\n\t\"./ProgressBar/Example10Percent.js\": 22,\n\t\"./ProgressBar/Example70Percent\": 23,\n\t\"./ProgressBar/Example70Percent.js\": 23,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 29,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 29,\n\t\"./TextInput/ExampleError\": 24,\n\t\"./TextInput/ExampleError.js\": 24,\n\t\"./TextInput/ExampleOptional\": 25,\n\t\"./TextInput/ExampleOptional.js\": 25,\n\t\"./TextInput/TextInputExampleError\": 26,\n\t\"./TextInput/TextInputExampleError.js\": 26,\n\t\"./TextInput/TextInputExampleOptional\": 27,\n\t\"./TextInput/TextInputExampleOptional.js\": 27,\n\t\"./TextInputBEM/ExampleError\": 30,\n\t\"./TextInputBEM/ExampleError.js\": 30,\n\t\"./TextInputCSSModules/ExampleError\": 31,\n\t\"./TextInputCSSModules/ExampleError.js\": 31\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 40;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({ components }) => {\n  return (\n    <ul className=\"navigation\">\n      {\n        components.map(name => {\n          return (\n            <li key={name}>\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/highlight'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre ref={ref => { this.element = ref }}>\n        <code>\n          {this.props.children}\n        </code>\n      </pre>\n    )\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return { showCode: !prevState.showCode };\n    });\n  }\n\n  render() {\n    const { showCode } = this.state;\n    const { code, description, name } = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4>}\n\n        <ExampleComponent />\n\n        <p>\n          <a href=\"#\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    )\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n}\n\nexport default Example;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({ props }) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          Object.keys(props).map(key => {\n            return (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>{props[key].description}</td>\n                <td>{props[key].type.name}</td>\n                <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n                <td>{props[key].required && \"Yes\"}</td>\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </table>\n  )\n}\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {\n        examples.length > 0 ?\n          examples.map(example => <Example key={example.name} example={example} componentName={name} />) :\n          \"No examples exist.\"\n      }\n\n      <h3>Props</h3>\n      {\n        props ?\n          <Props props={props} /> :\n          \"This component accepts no props.\"\n      }\n    </div>\n  )\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;","import React from 'react';\nimport Navigation from './Navigation';\nimport ComponentPage from './ComponentPage';\nimport componentData from '../../config/componentData';\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('hashchange', () => {\n      this.setState({ route: window.location.hash.substr(1) })\n    })\n  }\n\n  render() {\n    const { route } = this.state;\n    const component = route ? componentData.filter(component => component.name === route)[0] : componentData[0];\n\n    return (\n      <div>\n        <Navigation components={componentData.map(component => component.name)} />\n        <ComponentPage component={component} />\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Docs from './docs/Docs';\nimport '../node_modules/highlight.js/styles/atom-one-dark.css'\n\nReactDOM.render(<Docs />, document.getElementById('root'));\n"],"sourceRoot":""}